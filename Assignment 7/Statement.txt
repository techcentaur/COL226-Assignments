Assignment 7: A Front end for your Prolog interpreter

In this assignment you will use OCamllex and OCamlyacc to implement a front end for your Prolog interpreter (of the previous assignment).


Recall that:

A program is a list of clauses.  The clauses are separated by a newline.
 A clause can either be a fact or a rule. A fact has a head but no body.  A rule has a head and a body.    A clause is terminated with a period ("."), and the head and body of a clause, -- if the clause is a rule -- are separated by the symbol ":-".
The head is a single atomic formula.  A body is a sequence of atomic formulas.  The atomic formulas appearing in the body are separated by commas (",").
An atomic formula is a k-ary predicate symbol followed by a tuple of k terms.   An atomic formula is of the form p(t_1, ..., t_k)
A term is either a variable, a constant, or a k-ary function symbol with n sub terms.  A term t is of the form X (variable), a (constant) or f(t_1, ..., t_n) (constructor with n sub terms)
A goal is a sequence (list) of atomic formulas.  A goal g is of the form p_1(t_11, ..., t_1k), ..., p(t_m1, ..., t_mj).  That is, atomic formulas separated by commas, and terminated by a period and newline.

You will need to design appropriate tokens for the scanner (input to OCamllex).

Some of these include:

Integer constants, which have an optional sign, followed by at least one digit, without useless leading zeroes.
binary operations: + (addition), - (subtraction), * (multiplication), div, mod, ^ (exponentiation)
Parentheses: (, )
Boolean constants: T and F
Comparison operators: = (equal) , > (greater than), < (less than) , >= (greater or equal), <= (less or equal)
Identifiers, which are alphanumeric strings beginning with lower-case letter, and [possibly] including apostrophes and underscores -- for constants, function symbols (constructors) and predicate symbols
Delimiters: ; and , and . (semicolon, comma, period).
Square brackets "[" and " ]" and vertical bar "|"  for list constructions.
You may add others.

Grammar and Parsing

You need to design an unambiguous grammar which avoid left recursion Then associate semantic actions with the grammar rules.  You should avoid reduce/reduce and other conflicts

You will prepare two versions of the parser (both can be combined into one) that will, given a Prolog program (such as your type-checker)


(1) Output  the parse  tree of an input prolog program,

(2) interface for program with the prolog interpreter of the previous assignment and have a running toy Prolog interpreter, which you can compare for correctness on some test Prolog programs. 